from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pytonconnect import TonConnect
from .cfg import *
from .user import User
from .get_course_bull import readcource as course
from .connect_wallet import *
from .transfer import TransferJetton
from .transfer_message import send_transaction_tonconnect

wallet_list = TonConnect.get_wallets()

app = Router()


async def check_sub(user_id):
    try:
        sub_list = ["member", "administrator", "creator"]
        channels = ["-1002004552099", "-1002140229897"]
        for i in channels:
            _ = await bot.get_chat_member(i, user_id)
            if _.status.name.lower() not in sub_list:
                return False
        return True
    except:
        return True


@app.message(F.text)
async def withdraw_num_text(message: Message):
    user_id = message.from_user.id
    user = User(user_id)
    user.add_user(None)

    user.set_name(message.from_user.username)
    balance = user.get_balance()

    wstates = user.get_wstate()

    to_withdraw = "bull" if wstates["bull"] else ""

    if to_withdraw != "pppp":
        try:
            if to_withdraw == "bull":
                text = (
                    f"<blockquote>üëõ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance['bull']} $BULL (<i>{round(balance['bull'] * course(), 3)}$</i>)</blockquote> \n\nüí∏ –í—ã–≤–æ–¥ {float(message.text)} $BULL (<i>{round(float(message.text) * course(), 3)}$</i>)"
                    if float(message.text) >= MIN_WITHDRAW_bull
                    else f"<blockquote>üëõ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance['bull']} $BULL (<i>{round(balance['bull'] * course(), 3)}$</i>)</blockquote> \n\nüíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAW_bull} $BULL (<i>{round(MIN_WITHDRAW_bull * course(), 3)}$</i>)"
                )
                markup = (
                    [
                        [
                            InlineKeyboardButton(
                                text=f"‚ùî –í—ã–≤–µ—Å—Ç–∏ {float(message.text)} $BULL ({round(float(message.text) * course(), 3)}$)",
                                callback_data=f"verify_withdraw_bull_{float(message.text)}",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ôª –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_withdraw"
                            )
                        ],
                    ]
                    if float(message.text) >= MIN_WITHDRAW_bull
                    else [
                        [
                            InlineKeyboardButton(
                                text="‚ôª –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_withdraw"
                            )
                        ],
                    ]
                )
                if float(message.text) > balance["bull"]:
                    text = f"<blockquote>üëõ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance['bull']} $BULL (<i>{round(balance['bull'] * course(), 3)}$</i>)</blockquote> \n\nü§î <b>–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞!</b> \n\n<blockquote>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ {round(float(message.text), 3)} $BULL (<i>{round(float(message.text) * course(), 3)}$</i>)</blockquote>"
                    markup = [
                        [
                            InlineKeyboardButton(
                                text="‚ôª –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_withdraw"
                            )
                        ],
                    ]
        except ValueError:
            text = f"<blockquote>üëõ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance['bull']} $BULL (<i>{round(balance['bull'] * course(), 3)}$</i>)</blockquote> \n\nü§î <b>–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞!</b> \n\n<blockquote>–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ <i>(–Ω–∞–ø—Ä–∏–º–µ—Ä 10.25)</i></blockquote>"
            markup = [
                [
                    InlineKeyboardButton(
                        text="‚ôª –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_withdraw"
                    )
                ],
            ]

        keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

        await bot.edit_message_text(
            chat_id=user_id,
            message_id=int(wstates[to_withdraw]),
            text=text,
            reply_markup=keyboard,
        )
    await bot.delete_message(chat_id=user_id, message_id=message.message_id)


@app.callback_query(F.data == "wallet")
async def wallet_callback(query: CallbackQuery):
    user_id = query.from_user.id
    user = User(user_id)
    conn = get_connector(user_id)
    conn_status = await conn.restore_connection()
    if not conn_status:
        if len(user.get_address()) == 48:
            user.set_address("''")

    sub = await check_sub(user_id)
    if not sub:
        text = f"‚ö† –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞\n\n1. @NFTBullTon\n2. @NFTBullChat\n\n–ò —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ /start"
        await query.answer(text=text, show_alert=True)
    else:
        await query.answer()
        user.add_user(None)

        user.set_name(query.from_user.username)
        address = user.get_address()
        balance = user.get_balance()

        text = f"üí≥ –ö–æ—à–µ–ª—ë–∫\n\nüíµ –ë–∞–ª–∞–Ω—Å: {balance['bull']} $BULL (<i>{round(balance['bull'] * course(), 3)}$</i>)\n\nüëõ {await get_app_name(user_id)}:\n<code>{'–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω' if not address else address}</code>"
        markup = [
            # [
            #    InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw"),
            # ],
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"),
                InlineKeyboardButton(
                    text=f"üîó {'–ü—Ä–∏–≤—è–∑–∞—Ç—å' if not address else '–û—Ç–≤—è–∑–∞—Ç—å'}",
                    callback_data=f"{'connect' if not address else 'disconnect'}",
                ),
            ],
        ]

        keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

        await bot.edit_message_text(
            chat_id=user_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=keyboard,
        )


@app.callback_query(F.data == "withdraw")
async def withdraw_callback(query: CallbackQuery):
    await query.answer()
    user_id = query.from_user.id

    text = f"üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"

    markup = [
        [InlineKeyboardButton(text="üêÇ $BULL", callback_data="withdraw_bull")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"wallet")],
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

    await bot.edit_message_text(
        chat_id=user_id,
        message_id=query.message.message_id,
        text=text,
        reply_markup=keyboard,
    )


@app.callback_query(F.data == "withdraw_bull")
async def withdraw_bull_callback(query: CallbackQuery):
    user_id = query.from_user.id
    user = User(user_id)

    user.set_name(query.from_user.username)
    balance = user.get_balance()
    text = f"<blockquote>üëõ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance['bull']} $BULL (<i>{round(balance['bull'] * course(), 3)}$</i>)</blockquote> \n\nüí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–ú–∏–Ω–∏–º—É–º {MIN_WITHDRAW_bull} $BULL (<i>{round(MIN_WITHDRAW_bull * course(), 3)}$</i>)):"
    markup = [
        [InlineKeyboardButton(text="‚ôª –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_withdraw")],
    ]

    if balance["bull"] >= MIN_WITHDRAW_bull and user.get_address():
        user.set_wstate({"bull": query.message.message_id})

        keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

        await bot.edit_message_text(
            chat_id=user_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=keyboard,
        )
    else:
        if balance["bull"] < MIN_WITHDRAW_bull and user.get_address():
            await query.answer(
                text=f"‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAW_bull} $BULL ({round(MIN_WITHDRAW_bull * course(), 3)}$)",
                show_alert=True,
            )
        if not user.get_address():
            await query.answer(
                text=f"‚ö†Ô∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ $BULL –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫!",
                show_alert=True,
            )


@app.callback_query(F.data.startswith("verify_withdraw_"))
async def withdraw_sum_callback(query: CallbackQuery):
    user_id = query.from_user.id
    coin = query.data.split("_")[2]
    amount = float(query.data.split("_")[3])
    user = User(user_id)

    user.set_name(query.from_user.username)
    address = user.get_address()
    usd = "(<i>" + str(round(amount * course(), 3)) + "$</i>) "
    markup = [
        [
            InlineKeyboardButton(
                text=f"üí∏ –í—ã–≤–µ—Å—Ç–∏ {amount} ${coin.upper()}",
                callback_data=f"withdraw_{coin}_{amount}",
            )
        ],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_withdraw")],
    ]
    text = f"üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} ${coin.upper()} {usd}–Ω–∞ –∫–æ—à–µ–ª—ë–∫ –≤ {await get_app_name(user_id)}"
    if not address:
        text = f"‚ö†Ô∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ ${coin.upper()} –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫!"
        await query.answer(text=text, show_alert=True)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

        await bot.edit_message_text(
            chat_id=user_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=keyboard,
        )


@app.callback_query(F.data.startswith("withdraw_"))
async def withdraw_success_callback(query: CallbackQuery):
    user_id = query.from_user.id
    sub = await check_sub(user_id)
    if not sub:
        text = f"‚ö† –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞\n\n1. @NFTBullTon\n2. @NFTBullChat\n\n–ò —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ /start"
        await query.answer(text=text, show_alert=True)
    else:
        coin = query.data.split("_")[1]
        amount = float(query.data.split("_")[2])
        user = User(user_id)

        user.set_name(query.from_user.username)

        if coin == "bull":
            await query.message.edit_text(
                "üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫: –Ω–∞–∂–º–∏—Ç–µ <b>'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'</b>",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                                callback_data=f"search_withdraw_{amount}",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_withdraw"
                            )
                        ],
                    ]
                ),
            )


@app.callback_query(F.data.startswith("search_withdraw_"))
async def check_withdraw_callback(query: CallbackQuery):
    user_id = query.from_user.id
    await bot.edit_message_text(
        chat_id=query.from_user.id,
        message_id=query.message.message_id,
        text=f"üí∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ {await get_app_name(user_id)} –∏ –æ–∂–∏–¥–∞–π—Ç–µ.",
    )

    sub = await check_sub(user_id)
    if not sub:
        text = f"‚ö† –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞\n\n1. @NFTBullTon\n2. @NFTBullChat\n\n–ò —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ /start"
        await query.answer(text=text, show_alert=True)
    else:
        coin = "bull"
        amount = float(query.data.split("_")[2])
        user = User(user_id)

        user.set_name(query.from_user.username)
        address = user.get_address()
        usd = "(<i>" + str(round(amount * course(), 3)) + "$</i>) "
        text = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ {amount} ${coin.upper()} {usd} –Ω–∞ {await get_app_name(user_id)}"
        markup = [
            [
                InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="wallet"),
            ]
        ]

        transfer_status = None

        tr_jetton = await send_transaction_tonconnect(user_id)

        if tr_jetton == True:
            transfer_status = await TransferJetton(
                bull_MASTER_ADDRESS, address, round(float(amount), 2)
            )

        if transfer_status == None:
            await query.message.edit_text(
                f"üí¨ –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ {await get_app_name(user_id)}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_withdraw"
                            )
                        ]
                    ]
                ),
            )
        elif transfer_status == False:
            await query.message.edit_text(
                "‚ùå –ü—Ä–∏ –≤—ã–≤–æ–¥–µ $BULL –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, $TON –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª—ë–∫",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_withdraw"
                            )
                        ]
                    ]
                ),
            )
        else:
            balance = user.get_balance()
            balance[coin] = balance[coin] - float(amount)
            user.set_balance(balance)

            keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

            await bot.edit_message_text(
                chat_id=user_id,
                message_id=query.message.message_id,
                text=text,
                reply_markup=keyboard,
            )


@app.callback_query(F.data == "back_withdraw")
async def back_withdraw_callback(query: CallbackQuery):
    user_id = query.from_user.id
    user = User(user_id)

    user.set_name(query.from_user.username)
    text = f"‚ùå –û—Ç–º–µ–Ω–∞ "
    markup = [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="wallet")]]
    user.set_wstate({"bull": 0})

    keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

    await bot.edit_message_text(
        chat_id=user_id,
        message_id=query.message.message_id,
        text=text,
        reply_markup=keyboard,
    )


@app.callback_query(F.data == "connect")
async def connect_shoosee_callback(query: CallbackQuery):
    user_id = query.from_user.id
    text = "üîó –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:"

    markup = []

    for wallet in wallet_list:
        markup.append(
            [
                InlineKeyboardButton(
                    text=f"üëõ {wallet['name']}",
                    callback_data=f"connect:{wallet['name']}",
                )
            ]
        )

    markup.append(
        [
            InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="wallet"),
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

    await bot.edit_message_text(
        chat_id=user_id,
        message_id=query.message.message_id,
        text=text,
        reply_markup=keyboard,
    )


@app.callback_query(F.data == "disconnect")
async def disconnect_callback(query: CallbackQuery):
    user_id = query.from_user.id
    user = User(user_id)

    user.set_name(query.from_user.username)
    text = "‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!"

    await disconnect_wallet(user_id)
    user.set_address("''")

    await wallet_callback(query)

    await query.answer(text=text, show_alert=True)


@app.callback_query(F.data.startswith("connect:"))
async def connect_callback(query: CallbackQuery):
    user_id = query.from_user.id
    user = User(user_id)

    user.set_name(query.from_user.username)
    wallet = query.data.split(":")[1]
    url, connector = await connect_wallet(chat_id=user_id, wallet_name=wallet)
    text = f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {wallet}:"
    markup = [
        [InlineKeyboardButton(text="üëõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å", url=url)],
        [
            InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="wallet"),
        ],
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

    await bot.edit_message_text(
        chat_id=user_id,
        message_id=query.message.message_id,
        text=text,
        reply_markup=keyboard,
    )

    result = await wait_connection(connector)
    markup = [
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="wallet")],
    ]
    if result == f"Timeout error!":
        text = "‚ùé –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
    else:
        user.set_address(f"'{result}'")
        text = f"‚úÖ –ö–æ—à–µ–ª—ë–∫ <code>{result}</code> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!"

    keyboard = InlineKeyboardMarkup(inline_keyboard=markup)

    await bot.edit_message_text(
        chat_id=user_id,
        message_id=query.message.message_id,
        text=text,
        reply_markup=keyboard,
    )
